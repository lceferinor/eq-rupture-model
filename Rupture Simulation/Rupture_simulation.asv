%% Simulation of rupture occurrence: (Ceferino et al. BSSA (2018))
% Developed by: Luis Ceferino
% Date: 02/21/2017

clc; clearvars; close all;
%% Import all the BPT parameters and historic catalog data
addpath(fullfile(pwd));
load TD_Parameters_Segments.mat % It has (from South to North)
                                % N_Rupture_zones: number of sections
                                % BPT_a: Vector with alpha values in each section
                                % BPT_u: Vector with alpha values in each section
                                % Mean_T: Mean of interarrival times
                                % Covar_T:  Coefficient of variation of 
                                %            interarrival times
                                % t0: Vector with year of the last rupture 
                                %       occurrence at each section
                                % T_0: Year of start of catalog
                                % T_f: Year of end of catalog
                                % Rupture_history: Matrix with historic X_t
                                %                 X_t(j) = Rupture_history(t,j)
                                % L_rup: Rupture length of each section
                                

                                
% Overriding a few parameters
BPT_u = 450./sum(Rupture_history);
BPT_a(:) = 0.7;


% Defining extra parameters                                
N_rup_cases = N_Rupture_zones*(N_Rupture_zones+1); % Total number of feasible
                                                   % rupture configurations
Earthquake_set = zeros(N_rup_cases);  % For storing number of occurrences
                                      % of earthquake cases.
                                      % First 8 (1-seg), next 7 (2-seg), 
                                      % next 6 (3-seg), next 5 (4-seg), ... 
                                      

% Rates from Chlie for Lima from South to North (Review Excel for details)
M_rates = [3.73 4.17 5.42 11.04 6.79 7.38 6.46	5.15]*10^18; % Discrete

                                      
%% MC Simuation of Mc
N_years = 1000; % Number of years of simulation


% Sensitivity: For different variograms
Gamma = [150,200,250,300,350];

U = [];
for gamma = Gamma
    % Set covariance matrix
    Cov = ones(N_Rupture_zones, N_Rupture_zones);
    for i = 1:N_Rupture_zones
       for j = 1:i 
        Cov(i,j) = exp(-((j-i)*L_rup)^2/gamma^2); % Spherical correlogram
        Cov(j,i) = Cov(i,j);
       end
    end
    % Cholesky decomposition
    U = cat(3, U, chol(Cov, 'upper'));
end

% Section rupture times
Rup_T = cell(N_Rupture_zones,1); % Variable for storing the rupture 
                                 % interarrival times at each section
for i = 1:N_Rupture_zones
    Rup_T{i} = [];
end
Yearly_Mom_Release = []; % Stores the simulated moment realease at each section


% Sample uncorrelated Normal Random Variables 
% (more efficient to sample at the beggining)
mu = 0;
sigma = 1;
Occurrance_Sample = normrnd(mu, sigma , N_years, N_Rupture_zones);
% Spatially Correlated Bernoulli


% Set legends for plots
legend_moment = cell(1,length(Gamma));
legend_hist = cell(1,length(Gamma));
legend_moment{1,1} = 'Accumulated Moment (Historic Catalog)';
legend_hist{1,1} = 'Historical Records (Historic Catalog)';
h_norm = []; % Temporary variable to store Mw hist from different gammas
    
%% Simulation
for p = 1:length(Gamma)
    T = T_f - t0; % T: Year without earthquakes
    Simulation_Events = zeros(N_Rupture_zones, N_years); % Total number of events
    Moment_Release = zeros(N_Rupture_zones, N_years); % Total moment release
    Magnitude = [];
    for t = 1:N_years
        T = T + 1;
        % Estimate p_t
        p_equ = zeros(1, N_Rupture_zones);
        for j = 1:N_Rupture_zones
            CDFt = BPT_CDF(T, BPT_a(j), BPT_u(j));
            CDFtplus = BPT_CDF(T+1, BPT_a(j), BPT_u(j));
            p_equ(j) = (CDFtplus - CDFt)/(1-CDFt);
        end
        % Correlation and finding Z
        Z = Occurrance_Sample(t,:)*U(:,:,p);
        unifcorr = normcdf(Z);
        % Simulation threshold for earthquake occurrence
        % 1 means earthquake occurrence (True)
        Simulation_Events(:, t) = unifcorr < p_equ;
        
        % Store results of ruptures and moment release in the year
        n_seg = sum(Simulation_Events(:, t));
        if(n_seg > 0)
            rup_index = 1;
            % More than one rupture can happen in a given year
            while true
                start = rup_index;
                % Check rupture in the segment
                while Simulation_Events(rup_index, t) == 1
                    rup_index = rup_index + 1;
                    if rup_index > N_Rupture_zones
                       break; 
                    end
                end
                % If no rupture in the section, do not enter here
                if(start ~= rup_index)
                    rup_sec = rup_index - start;
                    Mw = 1.62*log10(rup_sec*L_rup) + 4.44;
                    M0 = 10^((Mw +10.7)*3/2)*10^-7; %M0 in Nm
                    Moment_Release(start:(rup_index - 1), t) = M0/rup_sec;
                    Magnitude = [Magnitude; Mw];
                    %%% Count the Earthquake Event
                    set_pos = ((8+9)*(rup_sec-1) - (rup_sec-1)^2)/2; % 8 + 7 + ... (9 - set_pos)
                    Earthquake_set(set_pos + start) = ...
                        Earthquake_set(set_pos + start) + 1;
                    %%%
                    for i_seg = start:(rup_index - 1)
                        Rup_T{i_seg} = [Rup_T{i_seg}, T(i_seg)];
                    end
                end
                rup_index = rup_index + 1;
                if rup_index > N_Rupture_zones
                   break; 
                end
            end
        end
        % Time since the last earthquake goes to 0 
        T(unifcorr < p_equ) = 0;
    end
    % Store moment release and magnitude occurrences for the correlogram value
    Yearly_Mom_Release = [Yearly_Mom_Release, ...
        sum(Moment_Release,2)/N_years];
    legend_moment{1, p+1} = ['Released by Simulation: \phi = ', num2str(Gamma(p)), ' km'];
    % Histogram Bins for Mw
    Mw_bins = 7.7499:0.5:9.5;
    [h, x] = hist(round(Magnitude*10)/10 + 0.001 , Mw_bins); % Adding 0.01 just to visualize Mw 7.5 as part of the interval 7.5-8 rather than 7 - 7.5
    h_norm = [h_norm; h];
    legend_hist{1, p+1} = ['Simulated EQs: \phi = ', num2str(Gamma(p)), ' km'];
end
   
%% Plots

% Plotting the yearly seismic moment release
f = figure;
hold on;
plot(1:8, M_rates(1:8), 'k', 'linewidth',2);
pl = plot(1:8, Yearly_Mom_Release');
% Set Color
colors = {'k', 'y', 'm', 'c', 'r', 'g', 'b'};
for p = 1:length(Gamma)
    set(pl(p), 'Color', colors{p+1});
end
xlabel('Segment Portion');
ylabel('Average Moment Release per Year (Nm/year)');  
legend(legend_moment);
axis([1 8 0 2.5*10^19])
title(['Accumulated vs Released Yearly M0 in Simulation']);
saveas(f, ['Moment_Release.png']);     



% Plotting the exceedance rates of magnitudes
f = figure;
Historical_Magnitudes = [8.10 7.50 7.85 8.40 7.50 8.60 8.20 8.10 8.10 7.99];
[h_hist, x_hist]  = hist(Historical_Magnitudes + 0.001, Mw_bins); 
ba = bar(x_hist, [h_hist/450; h_norm/N_years]', 'grouped');  % normalize to are to get empirical pdf.
% Set Color
set(ba(1), 'FaceColor', colors{1});
for p = 1:(length(Gamma))
    set(ba(p+1), 'FaceColor', colors{p+1});
end
xlabel('Mw');
ylabel('Normalized Frequency');
title(['Empirical PDF of Mw: Historical vs. Simulated']);
legend(legend_hist);
axis([7.5 9.5 0 30/1000]);
saveas(f, ['Magnitude_Hist.png']);
%1./sum(Simulation_Events')*N_years


% Saving results
Earthquake_rates = Earthquake_set/N_years;
save EQ_rates.mat Earthquake_rates

Parameters_BPT = [BPT_u;BPT_a;t0;Mean_T;Covar_T];
filename = 'Parameters_TD.csv';
csvwrite(filename,Parameters_BPT);
